#[derive(Clone, Copy)]
pub enum Biome {
    TheVoid,
    Plains,
    SunflowerPlains,
    SnowyPlains,
    IceSpikes,
    Desert,
    Swamp,
    MangroveSwamp,
    Forest,
    FlowerForest,
    BirchForest,
    DarkForest,
    PaleGarden,
    OldGrowthBirchForest,
    OldGrowthPineTaiga,
    OldGrowthSpruceTaiga,
    Taiga,
    SnowyTaiga,
    Savanna,
    SavannaPlateau,
    WindsweptHills,
    WindsweptGravellyHills,
    WindsweptForest,
    WindsweptSavanna,
    Jungle,
    SparseJungle,
    BambooJungle,
    Badlands,
    ErodedBadlands,
    WoodedBadlands,
    Meadow,
    CherryGrove,
    Grove,
    SnowySlopes,
    FrozenPeaks,
    JaggedPeaks,
    StonyPeaks,
    River,
    FrozenRiver,
    Beach,
    SnowyBeach,
    StonyShore,
    WarmOcean,
    LukewarmOcean,
    DeepLukewarmOcean,
    Ocean,
    DeepOcean,
    ColdOcean,
    DeepColdOcean,
    FrozenOcean,
    DeepFrozenOcean,
    MushroomFields,
    DripstoneCaves,
    LushCaves,
    DeepDark,
    NetherWastes,
    WarpedForest,
    CrimsonForest,
    SoulSandValley,
    BasaltDeltas,
    TheEnd,
    EndHighlands,
    EndMidlands,
    SmallEndIslands,
    EndBarrens,
}

impl Biome {
    pub(crate) fn should_melt_frozen_ocean_iceberg_slightly(&self, sea_level: i32) -> bool {
        todo!()
    }
}

pub(crate) struct ClimateParameter {
    pub(crate) temperature: (f32, f32),
    pub(crate) humidity: (f32, f32),
    pub(crate) continentalness: (f32, f32),
    pub(crate) erosion: (f32, f32),
    pub(crate) depth: (f32, f32),
    pub(crate) peaks_and_valleys: (f32, f32),
    pub(crate) biome: Biome,
}

impl ClimateParameter {
    pub(crate) fn new(
        temperature: (f32, f32),
        humidity: (f32, f32),
        continentalness: (f32, f32),
        erosion: (f32, f32),
        depth: (f32, f32),
        weirdness: (f32, f32),
        biome: Biome,
    ) -> Self {
        Self {
            temperature,
            humidity,
            continentalness,
            erosion,
            depth,
            peaks_and_valleys: weirdness,
            biome,
        }
    }
}
